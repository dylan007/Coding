#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
typedef long long int ll;
#define REP(i,a) for(int i=0;i<a;i++)

class MaximizingGCD {
public:
	int maximumGCDPairing(vector <int> A) {
		ll n = A.size();
		vector<vector<pair<ll,ll>>> dp(n,vector<pair<ll,ll>>(n,{0,0}));
		vector<vector<ll>> sum(n,vector<ll>(n,0));
		REP(i,n){
			for(int j=i+1;j<n;j++){
				if(i==j)
					continue;
				sum[j][i] = sum[i][j] = A[i] + A[j];
			}
		}
		ll ans=0,fin;
		fin = (1<<n)-1;
		cout << "Fin: " << fin << endl;
		for(int i=1;i<n;i++){
			ll tmp=0;
			tmp |= 1;
			tmp |= (1 << i);
			dp[i][0] = {sum[i][0],tmp};
			if(tmp==fin)
				ans = max(ans,sum[i][0]);
		}
		for(int c=1;c<n;c++){
			for(int r=0;r<n;r++){
				ll cc,cr;
				cc = c;
				cr = r;
				ll m=0,pc,pr;
				for(int k=0;k<n;k++){
					if((k==(c-1)) || (dp[k][c-1].second & (1<<cr)) || (dp[k][c-1].second & (1<<cc)))
						continue;
					if(__gcd(dp[k][c-1].first,sum[r][c]) >= m){
						m = __gcd(dp[k][c-1].first,sum[r][c]);
						pc = c-1;
						pr = k;
					}
				}
				cout << r << " " << c << " " << pc << " " << pr << " " << m << endl;
				dp[r][c].first = m;
				dp[r][c].second = dp[pr][pc].second;
				dp[r][c].second |= (1<<r);
				dp[r][c].second |= (1<<c);
				if(dp[r][c].second == fin){
					ans = max(m,ans);
					cout << m << endl;
				}
			}
		}
		for(auto it: dp){
			for(auto its: it)
				cout << its.first << "," << its.second << "\t";
			cout << endl;
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	MaximizingGCD *obj;
	int answer;
	obj = new MaximizingGCD();
	clock_t startTime = clock();
	answer = obj->maximumGCDPairing(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {5,4,13,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {26,23};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 49;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {100,200,300,500,1100,700};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {46,78,133,92,1,23,29,67,43,111,3908,276,13,359,20,21};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 16400;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
